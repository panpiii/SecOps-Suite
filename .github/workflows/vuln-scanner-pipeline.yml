name: Vulnerability Scanner CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'services/vuln-scanner/**'
      - '.github/workflows/vuln-scanner-pipeline.yml'
      - 'k8s/base/vuln-scanner/**'
      - 'k8s/overlays/*/vuln-scanner/**'
    tags:
      - 'vuln-scanner/v*.*.*'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/vuln-scanner/**'
      - '.github/workflows/vuln-scanner-pipeline.yml'
      - 'k8s/base/vuln-scanner/**'
      - 'k8s/overlays/*/vuln-scanner/**'

env:
  SERVICE_NAME: vuln-scanner
  SERVICE_DIR: services/vuln-scanner
  GO_VERSION: '1.22'
  ECR_REPOSITORY: vuln-scanner
  KUSTOMIZE_VERSION: 5.1.1
  COSIGN_VERSION: 2.2.0
  TRIVY_SEVERITY: 'CRITICAL,HIGH'
  TRIVY_EXIT_CODE: '1'
  TRIVY_VULN_TYPE: 'os,library'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SERVICE_DIR }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Verify dependencies
        run: go mod verify
        
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ${{ env.SERVICE_DIR }}
          args: --timeout=5m
          
      - name: Check formatting
        run: |
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted properly:"
            gofmt -l .
            exit 1
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ${{ env.SERVICE_DIR }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ env.SERVICE_DIR }}/coverage.out
          
      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Test coverage is below 70%: $COVERAGE%"
            exit 1
          fi
          echo "Test coverage: $COVERAGE%"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ${{ env.SERVICE_DIR }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Run gosec
        uses: securego/gosec@master
        with:
          args: -no-fail -fmt sarif -out gosec-results.sarif ./...
          
      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ env.SERVICE_DIR }}/gosec-results.sarif
          
      - name: Check for sensitive data
        uses: zricethezav/gitleaks-action@master
        with:
          config-path: .github/gitleaks.toml
          
      - name: Run dependency check
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'
        
      - name: Run nancy for dependency vulnerabilities
        run: |
          go list -json -deps ./... | nancy sleuth --quiet

  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ${{ env.SERVICE_DIR }}
    
    permissions:
      id-token: write
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=semver,pattern={{version}},suffix=-{{sha}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.SERVICE_DIR }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            
      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.TRIVY_SEVERITY }}
          exit-code: ${{ env.TRIVY_EXIT_CODE }}
          vuln-type: ${{ env.TRIVY_VULN_TYPE }}
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: ${{ env.COSIGN_VERSION }}
          
      - name: Sign the image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}@${{ steps.meta.outputs.digest }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          
      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        run: |
          cosign attest --key env://COSIGN_PRIVATE_KEY --type cyclonedx \
            --predicate <(syft ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.meta.outputs.version }} -o cyclonedx-json) \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}@${{ steps.meta.outputs.digest }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    permissions:
      id-token: write
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: ${{ env.KUSTOMIZE_VERSION }}
          
      - name: Set environment based on ref
        id: set-env
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/vuln-scanner/v}" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=sha-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
          fi
          
      - name: Update Kubernetes manifests
        run: |
          cd k8s/overlays/${{ steps.set-env.outputs.ENVIRONMENT }}/vuln-scanner
          
          # Update the image tag in kustomization.yaml
          kustomize edit set image ${ECR_REPOSITORY}=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.set-env.outputs.IMAGE_TAG }}
          
          # Set AWS account ID in ConfigMap
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          sed -i "s/\${AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g" ../../base/vuln-scanner/rbac.yaml
          
          # Set ECR registry in ConfigMap
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          sed -i "s/\${ECR_REGISTRY}/$ECR_REGISTRY/g" ../../base/vuln-scanner/deployment.yaml
          
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: Update vuln-scanner image to ${{ steps.set-env.outputs.IMAGE_TAG }} [skip ci]"
          file_pattern: k8s/overlays/${{ steps.set-env.outputs.ENVIRONMENT }}/vuln-scanner/kustomization.yaml
          
      - name: Trigger ArgoCD sync
        if: success()
        run: |
          # If using ArgoCD API
          curl -sSL -k -X POST \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            ${{ secrets.ARGOCD_SERVER }}/api/v1/applications/${{ env.SERVICE_NAME }}-${{ steps.set-env.outputs.ENVIRONMENT }}/sync \
            -d '{"prune": true, "dryRun": false}'
          
          echo "Deployment triggered for ${{ env.SERVICE_NAME }} in ${{ steps.set-env.outputs.ENVIRONMENT }}"

  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Notify Slack on success
        if: ${{ needs.deploy.result == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: ':rocket: Successfully deployed ${{ env.SERVICE_NAME }} to ${{ needs.deploy.outputs.environment }}'
          SLACK_TITLE: Deployment Success
          SLACK_USERNAME: GitHub Actions
          
      - name: Notify Slack on failure
        if: ${{ needs.deploy.result != 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments-alerts
          SLACK_COLOR: danger
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: ':x: Failed to deploy ${{ env.SERVICE_NAME }}. <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View details>'
          SLACK_TITLE: Deployment Failure
          SLACK_USERNAME: GitHub Actions
